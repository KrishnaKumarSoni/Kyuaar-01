name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set environment variables for testing
      run: |
        echo "TESTING=true" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "FIREBASE_STORAGE_BUCKET=test-bucket" >> $GITHUB_ENV

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=term-missing
      continue-on-error: false

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --cov=. --cov-append --cov-report=xml --cov-report=term-missing
      continue-on-error: false

    - name: Run end-to-end tests
      run: |
        pytest tests/e2e/ -v --cov=. --cov-append --cov-report=xml --cov-report=term-missing
      continue-on-error: false

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Generate coverage report
      run: |
        pytest --cov=. --cov-report=html
        echo "Coverage report generated in htmlcov/"

    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security linter
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt

    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Run Black code formatter check
      run: |
        black --check --diff .

    - name: Run isort import sorting check
      run: |
        isort --check-only --diff .

    - name: Run flake8 linter
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run mypy type checker
      run: |
        mypy . --ignore-missing-imports || true

  deployment-test:
    runs-on: ubuntu-latest
    needs: [test, security, lint]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test WSGI application
      run: |
        python -c "from app import app; print('WSGI app loads successfully')"

    - name: Test gunicorn startup
      run: |
        timeout 10s gunicorn --bind 0.0.0.0:8000 --timeout 30 wsgi:application --check-config

    - name: Validate Firebase configuration
      run: |
        python -c "
        import os
        required_env = ['SECRET_KEY', 'FIREBASE_STORAGE_BUCKET']
        missing = [var for var in required_env if not os.environ.get(var)]
        if missing:
            print(f'Missing environment variables: {missing}')
        else:
            print('Environment configuration valid')
        "
      env:
        SECRET_KEY: test-secret
        FIREBASE_STORAGE_BUCKET: test-bucket

  performance:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark

    - name: Run performance tests
      run: |
        pytest tests/ -k "performance or benchmark" -v --benchmark-json=benchmark.json || true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json